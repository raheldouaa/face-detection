import cv2
import dlib
import numpy as np

# Load the face detection model
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

# Load the dlib facial landmark predictor
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor('shape_predictor_68_face_landmarks.dat')

# Open the webcam
cap = cv2.VideoCapture(0)

def is_blinking(eye_points):
    # Calculate the distance between the eye landmarks
    left_eye = eye_points[36:42]
    right_eye = eye_points[42:48]
    
    # Calculate the eye aspect ratio (EAR)
    left_ear = (np.linalg.norm(left_eye[1] - left_eye[5]) + np.linalg.norm(left_eye[2] - left_eye[4])) / (2.0 * np.linalg.norm(left_eye[0] - left_eye[3]))
    right_ear = (np.linalg.norm(right_eye[1] - right_eye[5]) + np.linalg.norm(right_eye[2] - right_eye[4])) / (2.0 * np.linalg.norm(right_eye[0] - right_eye[3]))
    
    # Average EAR
    ear = (left_ear + right_ear) / 2.0
    return ear < 0.2  # Threshold for blinking

while True:
    # Read a frame from the camera
    ret, img = cap.read()
    if not ret:
        print("Failed to capture image")
        break

    # Convert the frame to grayscale
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Detect faces in the frame
    faces = detector(gray)

    for face in faces:
        # Get facial landmarks
        landmarks = predictor(gray, face)
        landmarks_points = np.array([[landmarks.part(n).x, landmarks.part(n).y] for n in range(68)])

        # Check for blinking
        if is_blinking(landmarks_points):
            cv2.putText(img, "Blink Detected", (face.left(), face.top() - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
        else:
            cv2.putText(img, "No Blink", (face.left(), face.top() - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

        # Draw rectangles around detected faces
        cv2.rectangle(img, (face.left(), face.top()), (face.right(), face.bottom()), (255, 0, 0), 2)

    # Display the frame with detected faces
    cv2.imshow('Face Detection with Anti-Spoofing', img)

    # Exit loop on pressing 'ESC' key
    k = cv2.waitKey(30) & 0xff
    if k == 27:
        break

# Release the webcam and close all OpenCV windows
cap.release()
cv2.destroyAllWindows()
